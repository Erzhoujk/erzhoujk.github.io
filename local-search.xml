<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>matrix calculus</title>
    <link href="/2021/06/29/matrix%20calculus/"/>
    <url>/2021/06/29/matrix%20calculus/</url>
    
    <content type="html"><![CDATA[<h2 id="矩阵求导-matrix-calculus"><a href="#矩阵求导-matrix-calculus" class="headerlink" title="矩阵求导(matrix calculus)"></a><strong>矩阵求导(matrix calculus)</strong></h2><p>   矩阵计算是数据科学,人工智能等方向的重要基础,越深入学习越发现矩阵计算的重要性。而矩阵计算不仅会大大缩短 证明的简洁，合理的结果还会在程序设计时提高运算速度。为了打下良好的基础，在本文梳理了矩阵的求导方法。 本文使用小写的<img src="https://www.zhihu.com/equation?tex=+x+" alt="[公式]"> 表示标量;小写加粗的<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7B%5Cmathcal%7Bx%7D+%7D" alt="[公式]"> 表示列向量;大写的<img src="https://www.zhihu.com/equation?tex=X" alt="[公式]">表示矩阵。文章从求和到矩阵迹运算的引入,可以根据不同知识储备进行跳跃查看。</p><h3 id="1-从全微分到求导"><a href="#1-从全微分到求导" class="headerlink" title="1.从全微分到求导"></a><strong>1.从全微分到求导</strong></h3><p>  如果给我们一个输入和输出都是标量的函数<img src="https://www.zhihu.com/equation?tex=y+=+f(x)" alt="[公式]">,我们只需依照标量求导的办法直接求导即可。但为了后面更加易于理解 我们从两边同时取微分操作开始。那么全微分的结果为<img src="https://www.zhihu.com/equation?tex=%5Cmathit%7Bdy%7D+=++f%27(x)%5Cmathit%7Bdx%7D" alt="[公式]">。稍作变换就可以得到<img src="https://www.zhihu.com/equation?tex=%5Cfrac%7B%5Cmathit%7Bdy%7D%7D%7B%5Cmathit%7Bdx%7D%7D+=++f%27(x)+" alt="[公式]">当输入的<img src="https://www.zhihu.com/equation?tex=x" alt="[公式]">不在为标量，而是一个列向量<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7B%5Cmathcal%7Bx%7D+%7D++=+%5Cleft+%5B++x_%7B1%7D,x_%7B2%7D+,x_%7B3%7D+,...x_%7Bn%7D+%5Cright+%5D+%5E%7BT%7D" alt="[公式]"> ,那么表达式形式为<img src="https://www.zhihu.com/equation?tex=y+=+f(x_1+,x_2+,x_3...x_n+)" alt="[公式]">。这里可以用到多元微积分里面的求导方法,即分别求导。但我们仍然将式子进行全微分展开可以得到:</p><p><img src="https://www.zhihu.com/equation?tex=%5Cmathit%7Bdy%7D++=+%5Cfrac%7B%5Cpartial+f%7D%7B%5Cpartial+x_1%7D%5Cmathit%7Bdx_1%7D+++%5Cfrac%7B%5Cpartial+f%7D%7B%5Cpartial+x_2%7D%5Cmathit%7Bdx_2%7D+++...++%5Cfrac%7B%5Cpartial+f%7D%7B%5Cpartial+x_n%7D%5Cmathit%7Bdx_n%7D+=+%5Csum_%7Bi=1%7D%5E%7Bn%7D%5Cfrac%7B%5Cpartial+f%5E%7BT%7D%7D%7B%5Cpartial+%5Cmathbf%7B%5Cmathcal%7Bx%7D+%7D+%7D+%5Cmathit%7Bd%7D%5Cmathcal%7Bx%7D++%5C%5C" alt="[公式]"></p><p>上面的式子可以看成是由一个偏导的横向量与微分的列向量相乘，分别<img src="https://www.zhihu.com/equation?tex=%5Cfrac%7B%5Cpartial+f%5E%7BT%7D%7D%7B%5Cpartial+%5Cmathbf%7B%5Cmathcal%7Bx%7D+%7D+%7D" alt="[公式]">和<img src="https://www.zhihu.com/equation?tex=+%5Cmathit%7Bd%7D%5Cmathcal%7Bx%7D+" alt="[公式]">进行表示。当<img src="https://www.zhihu.com/equation?tex=X" alt="[公式]">为矩阵时候, 仍用全微分展开可以得到下面的表达式：</p><p><img src="https://www.zhihu.com/equation?tex=df+=+%5Csum_%7Bj=1%7D%5E%7Bm%7D++%5Csum_%7Bi=1%7D%5E%7Bn%7D%5Cfrac%7B%5Cpartial+y%7D%7B%5Cpartial+x_%7Bij%7D%7D++dx_%7Bij%7D+=+tr(%5Cfrac%7B%5Cpartial+f%5E%7BT%7D%7D%7B%5Cpartial+%5Cmathcal%7Bx%7D+%7Ddx)+%5C%5C" alt="[公式]"></p><p>从这里开始,将两个矩阵每个元素对应相乘在整体求和的结果，采用迹的形式表达了出来整体就更加简洁。下面说一下迹的引入和相关的运算。</p><h3 id="2-迹的运算和微分的运算"><a href="#2-迹的运算和微分的运算" class="headerlink" title="2.迹的运算和微分的运算"></a><strong>2.迹的运算和微分的运算</strong></h3><h3 id="2-1-从矩阵的两种运算开始"><a href="#2-1-从矩阵的两种运算开始" class="headerlink" title="2.1 从矩阵的两种运算开始"></a><strong>2.1 从矩阵的两种运算开始</strong></h3><p>  我们知道矩阵乘法有两种运算，一种是两个大小都为<img src="https://www.zhihu.com/equation?tex=m*n" alt="[公式]">的矩阵<img src="https://www.zhihu.com/equation?tex=(A%E5%92%8CB)" alt="[公式]">对应元素相乘，我们将这种运算记作<img src="https://www.zhihu.com/equation?tex=A%5Codot+B" alt="[公式]">。 另一种矩阵的乘法就为后一个矩阵按照列将前面的矩阵各列组合，也就是线性代数中的乘法，直接记作<img src="https://www.zhihu.com/equation?tex=AC" alt="[公式]">。(<img src="https://www.zhihu.com/equation?tex=C" alt="[公式]">是一个大小为<img src="https://www.zhihu.com/equation?tex=n*k" alt="[公式]">的矩阵) 上面一个标量对矩阵求导的结果就可以表示为两个矩阵做<img src="https://www.zhihu.com/equation?tex=%5Codot" alt="[公式]">乘法并把所有项相加，这一情况可以通过矩阵求迹(迹为矩阵对角线值之和)来表达,记作tr。也就是下面的式子：<img src="https://www.zhihu.com/equation?tex=%5Csum+%5Csum+A%5Codot+B+=+tr(A%5E%7BT%7DB)" alt="[公式]"></p><h3 id="2-2-迹与微分运算"><a href="#2-2-迹与微分运算" class="headerlink" title="2.2 迹与微分运算"></a><strong>2.2 迹与微分运算</strong></h3><p>  我们从微分开始推导，并结合迹的运算完成标量对矩阵的求导。为了处理实际遇到的不同情况需要知道微分与迹运算规则，列举在下面：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Balign*%7D++d(XY)=(dX)Y+XdY+&++&++d(X%5E%7BT%7D)=(dX)%5E%7BT%7D+%5C%5C+++dX%5E%7B-1%7D+=+-X%5E%7B-1%7D(dX)X%5E%7B-1%7D&&+d(X%5Codot+Y)=(dX)%5Codot+Y+X%5Codot+dY++%5C%5C+++dtr(X)=tr(dX)&&+df(X)=f%27(X)%5Codot+dX++%5C%5C+tr(A%5E%7BT%7D(B%5Codot+C))+=+tr((A%5Codot+B)%5E%7BT%7DC)+&&+d%5Cleft+%7C+X+%5Cright+%7C+=+tr(X%5E%7B*%7DdX)+++%5Cend%7Balign*%7D%5C%5C" alt="[公式]"></p><h3 id="3-工具"><a href="#3-工具" class="headerlink" title="3.工具"></a><strong>3.工具</strong></h3><p>  这是我第一篇学习笔记博客。并分享给大家两个非常实用的工具。一个是由妈咪叔制作的 <strong><a href="https://link.zhihu.com/?target=https://www.latexlive.com/">latex公式编辑器</a></strong> 和 另一个是 <strong><a href="https://link.zhihu.com/?target=http://www.matrixcalculus.org/">矩阵求导工具</a></strong> 。工具虽好，也应该熟悉后面推导过程和原理。这篇博客还有很多的不足之处，先发出来，后面会一点点完善并添加一些与参考不同的求导题。</p><h3 id="4-参考文献"><a href="#4-参考文献" class="headerlink" title="4.参考文献"></a><strong>4.参考文献</strong></h3><p>***<a href="https://link.zhihu.com/?target=https://project.hupili.net/tutorial/hu2012-matrix-calculus/hu2012matrix-calculus.pdf">HU, Pili. “Matrix Calculus: Derivation and Simple Application.” (2012).</a>**<br>***<a href="https://zhuanlan.zhihu.com/p/24863977">矩阵求导术</a>**</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
